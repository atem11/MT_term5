grammar testGrammar

@import {
import Lab2.parserLab2.Tree;
}

s returns[t : Tree]  :
    { $t = new Tree("S"); }
    nre
    { $t.addChildren(nre.t); }
     nend
    { $t.addChildren(nend.t); }
    ;

nend returns[t : Tree]:
        Eps { $t = new Tree("Nend"); }
        |
        { $t = new Tree("Nend"); }
        s_
        { $t.addChildren(s_.t); }
    ;

s_  returns[t : Tree] :
            { $t = new Tree("S'");  }
            OR
            { $t.addChildren(new Tree(OR)); }
            nre
            { $t.addChildren(nre.t); }
            nend
            { $t.addChildren(nend.t); }
    ;

nre returns[t : Tree] :
                { $t = new Tree("Nre"); }
                os
                { $t.addChildren(os.t); }
                next
                { $t.addChildren(next.t); }
    ;

next returns[t : Tree] :
                Eps { $t = new Tree("Next"); }
                | { $t = new Tree("Next"); }
                nre_
                { $t.addChildren(nre_.t); }
    ;

nre_ returns[t : Tree] :
                { $t = new Tree("Nre'"); }
                os
                { $t.addChildren(os.t); }
                next
                { $t.addChildren(next.t); }
    ;

os returns[t : Tree] : { $t = new Tree("Os"); }
                       re
                       { $t.addChildren(re.t); }
                       klini
                       { $t.addChildren(klini.t); }
    ;

klini returns[t : Tree] :
    { $t = new Tree("Klini"); }
    Z
    { $t.addChildren(new Tree(Z)); }
    |
    { $t = new Tree("Klini"); }
    Q
    { $t.addChildren(new Tree(Q)); }
    |  Eps { $t = new Tree("Klini"); }
    ;

re returns[t : Tree] :
        { $t = new Tree("RE"); }
        LET
        { $t.addChildren(new Tree(LET)); }
    |   { $t = new Tree("RE"); }
        BRO
        { $t.addChildren(new Tree(BRO)); }
        s
        { $t.addChildren(s.t); }
        BRC
        { $t.addChildren(new Tree(BRC)); }
    ;

BRO : "\\(" ;
BRC : "\\)" ;
OR  : "\\|" ;
Q   : "\\?" ;
Z   : "\\*" ;
LET : "[a-z]+" ;